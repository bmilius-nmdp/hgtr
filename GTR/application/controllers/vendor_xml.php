<?php
// Copyright 2015 National Marrow Donor Program (NMDP)

// This file is part of GTR Typing Forms.

// GTR Typing Forms is free software: you can redistribute it and/or modify
//     it under the terms of the GNU Lesser General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.

//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU Lesser General Public License for more details.

//     You should have received a copy of the GNU Lesser General Public License
//     along with this program.  If not, see <http://www.gnu.org/licenses/>.

class Vendor_xml extends CI_Controller {
	
	public function __construct()
	{
		parent::__construct();
		$this->load->helper('url');
		$this->load->helper('download');
	}

	public function index()
	{
		
	$username = 'NMDP';
	$authority = 'NMDP';
	$org_type = 'institute';
	$org_id = '1';
	$org_name = 'National Marrow Donor Program';
	$org_name_abbr = 'NMDP';
	$submission_type = 'GTRLab'; // could be GTRLab, GTRKit, GTRTest, GTRResearchTest. GTRVendor Falls under LAB for now.
	
	//Grab data from form	
	//Vendor
	$vendor_name = $this->input->post('name_of_vendor');
	$address_line_1 = $this->input->post('address_line_1');
	$address_line_2 = $this->input->post('address_line_2');
	$address_line_3 = $this->input->post('address_line_3');
	$city = $this->input->post('city');
	$state = $this->input->post('state');
	$postal_code = $this->input->post('postal_code');
	$country = $this->input->post('country');
	$public_address_choice = $this->input->post('public_address_choice'); // if address can be made public
	$vendor_phone = $this->input->post('phone');
	$vendor_email = $this->input->post('vendor_email');
	
	//Person /need to loop this with conditionals.
	$personnel_first_name = $this->input->post('personnel_first_name');
	$personnel_last_name = $this->input->post('personnel_last_name');
	$personnel_middle_initial = $this->input->post('personnel_middle_initial');
	$personnel_prefix = $this->input->post('personnel_prefix');
	$personnel_public_email = $this->input->post('personnel_public_email');
	$personnel_public_phone = $this->input->post('personnel_public_phone');
	$personnel_private_email = $this->input->post('personnel_private_email');
	$personnel_private_phone = $this->input->post('personnel_private_phone');
	
	
	
	$vendor_director_choice = array();
	$public_personnel_choice = array();
	$primary_vendor_contact_choice = array();
	
	
	// How to extract values of aliases from radio buttons. 
	
	$radio_count = 0;
	$total_personnel = count($personnel_first_name);
	
	while(true)
	{
		$public_choice = 'public_personnel_choice_id_'.$radio_count;
		if ($this->input->post($public_choice))
		{
			echo $public_choice;
			$public_personnel_choice[] = ($this->input->post($public_choice));
			
		}		
		$radio_count++;
		if (count($public_personnel_choice) == $total_personnel)
		{			
			break;
				
		}
	}	
	
	$radio_count = 0;
	$primvend_count = count($primary_vendor_contact_choice);
	while($primvend_count < $total_personnel)
	{
		$vendor_primary = 'primary_vendor_contact_choice_id_'.$radio_count;
		if ($this->input->post($vendor_primary))
		{
			$primary_vendor_contact_choice[] = ($this->input->post($vendor_primary));
		}	
		$primvend_count = count($primary_vendor_contact_choice);
		$radio_count++;
	}
	$radio_count = 0;
	$isdirector_count = count($vendor_director_choice);
	while($isdirector_count < $total_personnel)
	{
		$vendor_director = 'vendor_director_choice_id_'.$radio_count;
		echo $vendor_director;
		if ($this->input->post($vendor_director))
		{
			$vendor_director_choice[] = ($this->input->post($vendor_director));
			
		}		
		$isdirector_count = count($vendor_director_choice);
		$radio_count++;
		
	}
	
		
	
	
	
	//Building XML Document	
	$xml = new DOMDocument('1.0', 'UTF-8');
	$xml->formatOutput = true;
	$xml->preserveWhiteSpace = false;	
	
	//root
	$submission_element = $xml->createElement('Submission');
	$xml->appendChild($submission_element);
	
	//description
	$description_element = $xml->createElement('Description');
	$submission_element->appendChild($description_element);
	
	$description_comment_element = $xml->createElement('Comment','XML File Generated by NMDP');
	$description_element->appendChild($description_comment_element);
	
	$submitter_element = $xml->createElement('Submitter');
	$submitter_attribute_user = $xml->createAttribute('user_name');
	$submitter_attribute_user->value = $username;
	$submitter_element->appendChild($submitter_attribute_user);
	$submitter_attribute_authority = $xml->createAttribute('authority');
	$submitter_attribute_authority->value = $authority;
	$submitter_element->appendChild($submitter_attribute_authority);
	$description_element->appendChild($submitter_element);
	
	$organization_element = $xml->createElement('Organization');
	$organization_attribute_type = $xml->createAttribute('type');
	$organization_attribute_type->value = $org_type;
	$organization_element->appendChild($organization_attribute_type);
	$organization_attribute_id = $xml->createAttribute('org_id');
	$organization_attribute_id->value = $org_id;
	$organization_element->appendChild($organization_attribute_id);
	$description_element->appendChild($organization_element);
	
	$org_name_element = $xml->createElement('Name',$org_name);
	$org_name_attribute = $xml->createAttribute('abbr');
	$org_name_attribute->value = $org_name_abbr;
	$org_name_element->appendChild($org_name_attribute);
	$organization_element->appendChild($org_name_element);	
	
	//action
	$action_element = $xml->createElement('Action');
	$submission_element->appendChild($action_element);
	
	$adddata_element = $xml->createElement('AddData');
	$adddata_attribute_target_db = $xml->createAttribute('target_db');
	$adddata_attribute_target_db->value = "GTR";
	$adddata_element->appendChild($adddata_attribute_target_db);
	$adddata_attribute_target_db_context = $xml->createAttribute('target_db_context');
	$adddata_attribute_target_db_context->value = "Org";
	$adddata_element->appendChild($adddata_attribute_target_db_context);
	$action_element->appendChild($adddata_element);
	
	$data_element = $xml->createElement('Data');
	$data_attribute = $xml->createAttribute('content_type');
	$data_attribute->value = "xml";
	$data_element->appendChild($data_attribute);
	$adddata_element->appendChild($data_element);
	
	$xmlcontent_element = $xml->createElement('XmlContent');
	$data_element->appendChild($xmlcontent_element);
	
	$gtr_submission_type = $xml->createElement($submission_type);
	$xmlcontent_element->appendChild($gtr_submission_type);
	
	//GTRLab/Organization	
	$data_organization_element = $xml->createElement('Organization');
	$gtr_submission_type->appendChild($data_organization_element);
	
	$dataorg_name_element = $xml->createElement('Name', $vendor_name);
	$data_organization_element->appendChild($dataorg_name_element);
	
	$mailing_address_element = $xml->createElement('MailingAddress');
	$mailing_address_attribute = $xml->createAttribute('Public');
	$mailing_address_attribute->value = $public_address_choice;
	$mailing_address_element->appendChild($mailing_address_attribute);
	$data_organization_element->appendChild($mailing_address_element);
	
	//may need to add validation to page, that line1 must be filled before line 2, then 3.
	//this if is because it is an optional field.
	if ($address_line_1)
	{
		$address_line_1 = $xml->createElement('Line1',$address_line_1);
		$mailing_address_element->appendChild($address_line_1);
		if ($address_line_2)
		{
			$address_line_2 = $xml->createElement('Line2',$address_line_2);
			$mailing_address_element->appendChild($address_line_2);
			
			if ($address_line_3)
			{
			$address_line_3 = $xml->createElement('Line3',$address_line_3);
			$mailing_address_element->appendChild($address_line_3);
			
			}
		}
	}
	
	$city_element = $xml->createElement('City',$city);
	$mailing_address_element->appendChild($city_element);
	$state_element = $xml->createElement('State', $state);
	$mailing_address_element->appendChild($state_element);
	$postcode_element = $xml->createElement('PostCode', $postal_code);
	$mailing_address_element->appendChild($postcode_element);
	$country_element = $xml->createElement('Country',$country);
	$mailing_address_element->appendChild($country_element);
	
	$lab_contact_element = $xml->createElement('LabContact');
	$data_organization_element->appendChild($lab_contact_element);
	$vendor_email = $xml->createElement('Email',$vendor_email);
	$vendor_phone = $xml->createElement('Phone',$vendor_phone);
	$lab_contact_element->appendChild($vendor_email);
	$lab_contact_element->appendChild($vendor_phone);
	
	//need to add optional vendor URL field to form
	// if ($lab_url)
	// {
	//	$url = $xml->createElement('URL',$lab_url);
	//	$data_organization_element->appendChild($url);
	// }	
	
	// May need labservices section in form if ($lab_services) {}
	// also labaffliations
	
		
	//GTRLab/Personnel
	
	// IF here to add in a loop for each person added
	
	$count = 0;
	foreach($personnel_first_name as $firstname)
	{
		echo $firstname;
		echo $personnel_middle_initial[$count];
	
	$Personnel_element = $xml->createElement('Personnel');
	$Personnel_isdirector_attrib = $xml->createAttribute('IsDirector');
	$Personnel_isdirector_attrib->value = $vendor_director_choice[$count];
	$Personnel_element->appendChild($Personnel_isdirector_attrib);
	$gtr_submission_type->appendChild($Personnel_element);
	$Personnel_primary_attrib = $xml->createAttribute('PrimaryContact');
	$Personnel_primary_attrib->value = $primary_vendor_contact_choice[$count];
	$Personnel_element->appendChild($Personnel_primary_attrib);
	$Personnel_display_attrib = $xml->createAttribute('DisplayWeb');
	$Personnel_display_attrib->value = $public_personnel_choice[$count];
	$Personnel_element->appendChild($Personnel_display_attrib);
	
	//GTRLab/Personnel/Person
	$person_element = $xml->createElement('Person');
	$Personnel_element->appendChild($person_element);
	$person_name_element = $xml->createElement('Name');
	$person_element->appendChild($person_name_element);
	$person_firstname_element = $xml->createElement('First',$personnel_first_name[$count]);
	$person_name_element->appendChild($person_firstname_element);
	$person_lastname_element = $xml->createElement('Last',$personnel_last_name[$count]);
	$person_name_element->appendChild($person_lastname_element);
	if ($personnel_middle_initial[$count])
	{
		$person_MI_element = $xml->createElement('Middle',$personnel_middle_initial[$count]);
		$person_name_element->appendChild($person_MI_element);
	}
	if ($personnel_prefix[$count])
	{
		$person_prefix = $xml->createElement('Prefix',$personnel_prefix[$count]);
		$person_name_element->appendChild($person_prefix);
	}
	
	//Need to add optional degree, certification, crediential fields here and to the form
	
	//GTRLab/Personnel/PublicContact
	$personnel_publiccontact_element = $xml->createElement('PublicContact');
	$Personnel_element->appendChild($personnel_publiccontact_element);
	$publicemail_element = $xml->createElement('Email',$personnel_public_email[$count]);
	$personnel_publiccontact_element->appendChild($publicemail_element);
	$publicphone_element = $xml->createElement('Phone', $personnel_public_phone[$count]);
	$personnel_publiccontact_element->appendChild($publicphone_element);
	//need to add optional fax
	
	//GTRLab/Personnel/PrivateContact
	$personnel_privatecontact_element = $xml->createElement('PrivateContact');
	$Personnel_element->appendChild($personnel_privatecontact_element);
	$privateemail_element = $xml->createElement('Email',$personnel_private_email[$count]);
	$personnel_privatecontact_element->appendChild($privateemail_element);
	$privatephone_element = $xml->createElement('Phone', $personnel_private_phone[$count]);
	$personnel_privatecontact_element->appendChild($privatephone_element);
	
	
	$count++;
	}
	
	
	

	
	
	
	
	$xml_string = $xml->saveXML();
	
	$data['xml'] = $xml_string;
	
	$vendor_underscore = str_replace(' ', '_', $vendor_name);
	$name = $vendor_underscore.'_submission.xml';
	
	
	
	
	
	
	//$this->load->view('header');
	force_download($name,$xml_string);
	$this->load->view('xml_output', $data);
	}
}
?>

